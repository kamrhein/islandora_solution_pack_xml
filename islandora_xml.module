<?php

/**
 * @file
 * Handles the creation and display of xml objects.
 */

/**
 * Implements hook_islandora_view_print_object().
 */
function islandora_xml_islandora_view_print_object($object) {
  $output = array();
  if (in_array('islandora:sp_xml_cmodel', $object->models)) {
    $resource_url = url("islandora/object/{$object->id}/datastream/XML/view");
    $params = array(
      'title' => $object->label,
      'path' => $resource_url,
    );

    // Theme the image seperatly.
    $variables['islandora_img'] = theme('image', $params);
    $output = theme('islandora_xml_print', array(
    'islandora_content' => $variables['islandora_img']));
  }

  return $output;
}

/** 
 * Implements hook_theme().
 *
 * We supply a pattern so we can overide templates at the theme level if needed.
 * we can append a pid to a template and the new template file will be called
 * (the pids colon should be replaced with a dash).
 */
function islandora_xml_theme($existing, $type, $theme, $path) {
  return array(
    'islandora_xml' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-xml',
      // We can add PIDs to the end of this pattern in our preprocess function
      // and templates will be able to have have a pid appended to the
      // template name to overide a template on a per object basis.
      // An example template might be named:
      // "islandora-basic-image--islandora-27.tpl.php".
      'pattern' => 'islandora_xml__',
      'variables' => array('islandora_object' => NULL),
    ),
    'islandora_xml_print' => array(
      'file' => 'theme/theme.inc',
      'template' => 'theme/islandora-xml-print',
      'variables' => array('islandora_content' => NULL),
    ),
  );
}

/** 
 * Implements hook_islandora_required_objects().
 */
function islandora_xml_islandora_required_objects(IslandoraTuque $connection) {
  $module_path = drupal_get_path('module', 'islandora_xml');
  // Image Content Model.
  $image_content_model = $connection->repository->constructObject('islandora:sp_xml_cmodel');
  $image_content_model->owner = 'fedoraAdmin';
  $image_content_model->label = 'Islandora XML Content Model';
  $image_content_model->models = 'fedora-system:ContentModel-3.0';
  // DS-COMPOSITE-MODEL Datastream.
  $datastream = $image_content_model->constructDatastream('DS-COMPOSITE-MODEL', 'X');
  $datastream->label = 'DS-COMPOSITE-MODEL';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_xml_ds_composite_model.xml", FALSE);
  $image_content_model->ingestDatastream($datastream);
  // XML Collection.
  $image_collection = $connection->repository->constructObject('islandora:sp_xml_collection');
  $image_collection->owner = 'fedoraAdmin';
  $image_collection->label = 'XML Collection';
  $image_collection->models = 'islandora:collectionCModel';
  $image_collection->relationships->add(FEDORA_RELS_EXT_URI, 'isMemberOfCollection', 'islandora:root');
  // Collection Policy Datastream.
  $datastream = $image_collection->constructDatastream('COLLECTION_POLICY', 'X');
  $datastream->label = 'Collection policy';
  $datastream->mimetype = 'application/xml';
  $datastream->setContentFromFile("$module_path/xml/islandora_xml_collection_policy.xml", FALSE);
  $image_collection->ingestDatastream($datastream);
  // TN Datastream.
  $datastream = $image_collection->constructDatastream('TN', 'M');
  $datastream->label = 'Thumbnail';
  $datastream->mimetype = 'image/png';
  $datastream->setContentFromFile("$module_path/images/folder.png", FALSE);
  $image_collection->ingestDatastream($datastream);
  return array(
    'islandora_xml' => array(
      'title' => 'Islandora XML',
      'objects' => array(
        $image_content_model,
        $image_collection,
      ),
    ),
  );
}

/**
 * Implements hook_CMODEL_PID_islandora_view_object().
 */
function islandora_xml_islandora_sp_xml_cmodel_islandora_view_object($object, $page_number, $page_size) {
  $output = theme('islandora_xml', array('islandora_object' => $object));
  return array('' => $output);
}

